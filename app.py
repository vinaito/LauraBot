"""Guia gastron√¥mico de Pinheiros com chat conversacional.

Este aplicativo Streamlit l√™ uma base JSON contendo informa√ß√µes de
restaurantes no bairro de Pinheiros, em S√£o Paulo, e disponibiliza
uma interface de chat para que o usu√°rio converse em linguagem
natural. O modelo da OpenAI responde √†s perguntas baseando‚Äëse nos
dados carregados. Se a resposta n√£o estiver na base, o bot avisar√°
que n√£o tem a informa√ß√£o.

Para que o chat funcione, √© necess√°rio definir a vari√°vel secreta
`OPENAI_API_KEY` nas configura√ß√µes da aplica√ß√£o do Streamlit
Community¬†Cloud. O valor **n√£o** deve ser armazenado neste
arquivo de c√≥digo. Localmente, voc√™ pode criar um arquivo
`.streamlit/secrets.toml` com a chave.

O app tamb√©m mostra uma lista completa de restaurantes em um
expansor para refer√™ncia.
"""

import json
import os
from typing import Dict, Any, List

import streamlit as st
from PIL import Image

# Importa o cliente OpenAI a partir do SDK 1.x. Para vers√µes
# anteriores (<=0.28), este import n√£o existe e ser√° necess√°rio
# pin√°‚Äëlo ou atualizar seu c√≥digo.
try:
    from openai import OpenAI  # type: ignore
except ImportError:
    # Mensagem amig√°vel caso o m√≥dulo openai n√£o esteja instalado.
    OpenAI = None  # type: ignore


def load_data(path: str) -> List[Dict[str, Any]]:
    """L√™ e retorna a base de restaurantes a partir de um arquivo JSON.

    O arquivo deve estar codificado em UTF‚Äë8. Em caso de erro de
    abertura ou decodifica√ß√£o, ser√° lan√ßada a exce√ß√£o correspondente.
    """
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)


def main() -> None:
    """Fun√ß√£o principal que monta a interface e executa o chat."""
    st.set_page_config(page_title="Guia Gastron√¥mico de Pinheiros", page_icon="üçΩÔ∏è")
    st.title("üçΩÔ∏è Guia Gastron√¥mico de Pinheiros")
    st.markdown(
        "Converse sobre restaurantes em Pinheiros! Fa√ßa perguntas em "
        "linguagem natural e receba respostas baseadas em nossa base de "
        "dados. Se n√£o soubermos a resposta, avisaremos."
    )

    # Caminhos para a base e as imagens
    base_path = os.path.dirname(__file__)
    data_path = os.path.join(base_path, "pinheiros_restaurants.json")

    # Carrega os dados e exibe um erro amig√°vel se o arquivo n√£o existir.
    try:
        data = load_data(data_path)
    except FileNotFoundError:
        st.error(
            "Arquivo 'pinheiros_restaurants.json' n√£o encontrado. "
            "Certifique‚Äëse de que o arquivo est√° na mesma pasta que o app."
        )
        return

    # Mapeia nome do restaurante para o arquivo de imagem. Use
    # 'placeholder_light_gray_block.png' para imagens ausentes.
    images: Dict[str, str] = {
        "Gael Cozinha Mesti√ßa": "e7618e6d-1c71-4d26-ae8b-b98d58904dc7.png",
        "Otoshi Izakaya": "a4c1545e-5b25-4d35-aeb1-b26ff005b1e1.png",
        "Jojo Ramen (Pinheiros)": "6ce64bee-567c-4fc6-b659-ec32bd181acd.png",
        "Modern Mamma Osteria (Moma) ‚Äì Pinheiros": "a23da210-f677-45d8-831f-36e6826555ee.png",
        "Momokuri": "0b8093ff-c821-4186-ab5e-59392575d051.png",
        "Arlete Bar e Mercearia": "ef1b98a1-9fa7-442b-9969-2c51b25bc897.png",
        "Piraj√° (Faria Lima)": "cfbdc833-d2bc-4c9e-bac2-e582a5a6a71e.png",
        "Buzina Burgers (Baixo Pinheiros)": "78cf8129-c001-4bdf-8daf-9644137aeaf3.png",
        "Notorious Fish": "placeholder_light_gray_block.png",
        "Hi Pokee ‚Äì Pinheiros": "placeholder_light_gray_block.png",
    }

    # L√™ a pergunta do usu√°rio via chat_input. Este campo aparece na
    # parte inferior da p√°gina.
    question = st.chat_input("Pergunte algo sobre restaurantes em Pinheiros‚Ä¶")

    if question:
        # Verifica se a biblioteca openai est√° dispon√≠vel
        if OpenAI is None:
            st.error(
                "A biblioteca 'openai' n√£o est√° instalada. Inclua 'openai' no "
                "arquivo requirements.txt e fa√ßa o deploy novamente."
            )
        else:
            # Tenta obter a chave da OpenAI a partir dos segredos configurados
            api_key = st.secrets.get("OPENAI_API_KEY")
            if not api_key:
                st.error(
                    "Chave OPENAI_API_KEY n√£o encontrada nos segredos. "
                    "Adicione sua chave no painel de Secrets da aplica√ß√£o no "
                    "Streamlit Cloud."
                )
            else:
                # Cria o cliente OpenAI com a chave fornecida
                client = OpenAI(api_key=api_key)
                # Constr√≥i o contexto com os dados convertidos para JSON
                context = json.dumps(data, ensure_ascii=False)
                # Monta o prompt com instru√ß√µes e a pergunta
                prompt = (
                    "Voc√™ √© um guia gastron√¥mico especializado em restaurantes "
                    "em Pinheiros, S√£o Paulo. Use **apenas** as informa√ß√µes "
                    "abaixo (fornecidas em formato JSON) para responder √† "
                    "pergunta do usu√°rio. Se a resposta n√£o estiver na base, "
                    "diga que n√£o possui essa informa√ß√£o.\n\n"
                    f"Base de dados:\n{context}\n\n"
                    f"Pergunta: {question}\n\n"
                    "Resposta:"
                )
                try:
                    # Chama o modelo chat para gerar a resposta
                    completion = client.chat.completions.create(
                        model="gpt-3.5-turbo",  # ou outro modelo autorizado
                        messages=[{"role": "user", "content": prompt}],
                        temperature=0.3,
                        max_tokens=600,
                    )
                    answer = completion.choices[0].message.content.strip()
                    st.markdown(answer)
                except Exception as exc:
                    st.error(f"Erro ao consultar a API da OpenAI: {exc}")

    # Expansor com a lista completa de restaurantes para refer√™ncia
    with st.expander("Ver lista completa de restaurantes"):
        for item in data:
            name = item["name"]
            st.markdown(f"### {name}")
            col1, col2 = st.columns([1, 3])
            with col1:
                img_file = images.get(name, "placeholder_light_gray_block.png")
                img_path = os.path.join(base_path, img_file)
                if os.path.exists(img_path):
                    st.image(Image.open(img_path), use_column_width=True)
            with col2:
                cuisines = ", ".join(item.get("cuisine", [])) or "‚Äì"
                price = item.get("price_level", "‚Äì")
                voucher = item.get("accepts_voucher")
                if voucher is True:
                    voucher_str = "Aceita"
                elif voucher is False:
                    voucher_str = "N√£o aceita"
                else:
                    voucher_str = "N√£o informado"
                diets = ", ".join(item.get("diet_options", [])) or "‚Äì"
                accessibility = item.get("accessibility")
                if accessibility is True:
                    access_str = "Possui"
                elif accessibility is False:
                    access_str = "N√£o possui"
                else:
                    access_str = "N√£o informado"
                hours = item.get("hours", "N√£o informado")
                st.markdown(f"- **Culin√°ria:** {cuisines}")
                st.markdown(f"- **Pre√ßo:** {price}")
                st.markdown(f"- **Vale-refei√ß√£o:** {voucher_str}")
                st.markdown(f"- **Op√ß√µes de dieta:** {diets}")
                st.markdown(f"- **Acessibilidade:** {access_str}")
                st.markdown(f"- **Hor√°rio:** {hours}")
                st.markdown(f"- **Endere√ßo:** {item['address']}")
                st.markdown(f"- **Descri√ß√£o:** {item['description']}")

if __name__ == "__main__":
    main()